// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

model School {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  createdAt DateTime? @default(now())

  adress      String
  zip         Int
  city        String
  countryCode String @default("DK")

  People PersonToSchool[]
}

model PersonToSchool {
  schoolId String @db.Uuid
  School   School @relation(fields: [schoolId], references: [id])
  personId String @db.Uuid
  Person   Person @relation(fields: [personId], references: [id])

  @@id([schoolId, personId])
}

model CustodianToPerson {
  custodianId String @db.Uuid
  childId     String @db.Uuid

  Custodian Person? @relation("Custodian", fields: [custodianId], references: [id])
  Children  Person? @relation("Children", fields: [childId], references: [id])

  @@id([custodianId, childId])
}

model Person {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  parentId String? @db.Uuid

  Users      User[]
  Profile    Profile?
  Children   CustodianToPerson[] @relation("Children")
  Custodians CustodianToPerson[] @relation("Custodian")

  Schools PersonToSchool[]
}

model Profile {
  id          String  @id @default(dbgenerated("gen_random_uuid()"))
  firstname   String
  lastname    String
  age         Int?
  phone       String?
  address     String?
  city        String?
  zip         Int?
  countryCode String  @default("DK")

  personId String @unique
  Person   Person @relation(fields: [personId], references: [id])
}

// User is the table used for accessing the application
model User {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String  @unique
  isVerified Boolean @default(false)
  password   String

  personId String @db.Uuid
  Person   Person @relation(fields: [personId], references: [id])

  roleId Int
  Role   Role @relation(fields: [roleId], references: [id])
}

enum RoleType {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  DIRECTOR
}

model Role {
  id    Int      @id @default(autoincrement())
  name  RoleType @default(STUDENT)
  Users User[]

  Permissions RoleToPermission[]
}

model RoleToPermission {
  roleId       Int
  permissionId Int
  Permission   Permission @relation(fields: [permissionId], references: [id])
  Role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
}

enum PermissionType {
  READ
  READ_ALL
  WRITE
  WRITE_ALL
}

enum ResourceType {
  SCHOOL
  TEACHER
  STUDENT
  USER
}

model Permission {
  id       Int            @id @default(autoincrement())
  resource ResourceType
  type     PermissionType

  Roles RoleToPermission[]
}
