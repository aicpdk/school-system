// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

model School {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  createdAt   DateTime?        @default(now())
  adress      String
  zip         Int
  city        String
  countryCode String           @default("DK")
  People      PersonToSchool[]
  Class       Class[]
}

model PersonToSchool {
  schoolId String @db.Uuid
  School   School @relation(fields: [schoolId], references: [id])
  personId String @db.Uuid
  Person   Person @relation(fields: [personId], references: [id])

  @@id([schoolId, personId])
}

model CustodianToPerson {
  custodianId String  @db.Uuid
  childId     String  @db.Uuid
  Custodian   Person? @relation("Custodian", fields: [custodianId], references: [id])
  Children    Person? @relation("Children", fields: [childId], references: [id])

  @@id([custodianId, childId])
}

model Email {
  email    String  @id
  personId String  @db.Uuid
  Person   Person? @relation(fields: [personId], references: [id])
}

model Person {
  id                   String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Users                User[]
  firstname            String
  lastname             String
  age                  Int?
  phone                String?
  address              String?
  city                 String?
  zip                  Int?
  countryCode          String              @default("DK")
  Children             CustodianToPerson[] @relation("Children")
  Custodians           CustodianToPerson[] @relation("Custodian")
  Schools              PersonToSchool[]
  Attendence           Attendence[]
  PersonToClass        PersonToClass[]
  AttendenceRegistered Attendence[]        @relation("AttendenceRegistration")
  Class                Class[]             @relation("ClassCreated")
  Note                 Note[]
  Email                Email[]
}

// User is the table used for accessing the application
model User {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username   String  @unique
  isVerified Boolean @default(false)
  password   String
  personId   String  @db.Uuid
  Person     Person  @relation(fields: [personId], references: [id])
  roleId     String  @db.Uuid
  Role       Role    @relation(fields: [roleId], references: [id])
}

enum RoleType {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  DIRECTOR
}

model Role {
  id          String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        RoleType           @default(STUDENT)
  Users       User[]
  Permissions RoleToPermission[]
}

model RoleToPermission {
  roleId       String     @db.Uuid
  permissionId String     @db.Uuid
  Permission   Permission @relation(fields: [permissionId], references: [id])
  Role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
}

enum PermissionType {
  READ
  READ_ALL
  WRITE
  WRITE_ALL
}

enum ResourceType {
  SCHOOL
  TEACHER
  STUDENT
  USER
  CLASS
  ATTENDENCE
}

model Permission {
  id       String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  resource ResourceType
  type     PermissionType
  Roles    RoleToPermission[]

  @@unique([resource, type])
}

model Attendence {
  lectureId      String    @db.Uuid
  personId       String    @db.Uuid
  attendedAt     DateTime  @default(now())
  leftAt         DateTime?
  registeredById String    @db.Uuid
  RegisteredBy   Person    @relation("AttendenceRegistration", fields: [registeredById], references: [id])
  Lecture        Lecture   @relation(fields: [lectureId], references: [id])
  Person         Person    @relation(fields: [personId], references: [id])

  @@id([lectureId, personId])
}

model Note {
  id          String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lecutureId  String   @db.Uuid
  Lecture     Lecture  @relation(fields: [lecutureId], references: [id])
  text        String
  createdAt   DateTime @default(now())
  createdById String   @db.Uuid
  CreatedBy   Person   @relation(fields: [createdById], references: [id])

  @@id([id, lecutureId])
}

model Lecture {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  startAt    DateTime
  endAt      DateTime
  Notes      Note[]
  Attendence Attendence[]
}

enum ClassRolesType {
  TEACHER
  STUDENT
  DIRECTOR
  GUEST
}

model PersonToClass {
  personId  String         @db.Uuid
  classId   String         @db.Uuid
  roleType  ClassRolesType @default(STUDENT)
  joinedAt  DateTime       @default(now())
  removedAt DateTime?
  Class     Class          @relation("ClassRelated", fields: [classId], references: [id])
  Person    Person         @relation(fields: [personId], references: [id])

  @@id([personId, classId])
}

model Class {
  id          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  schoolId    String          @db.Uuid
  createdAt   DateTime        @default(now())
  createdById String          @db.Uuid
  CreatedBy   Person          @relation("ClassCreated", fields: [createdById], references: [id])
  School      School          @relation(fields: [schoolId], references: [id])
  People      PersonToClass[] @relation("ClassRelated")
}
